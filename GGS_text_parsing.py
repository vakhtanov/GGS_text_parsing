# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Text_transform
                                 A QGIS plugin
 Parce text files
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-10-24
        git sha              : $Format:%H$
        copyright            : (C) 2019 by wahha
        email                : wahha@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .GGS_text_parsing_dialog import Text_transformDialog
import os.path
from .parce_file import parse_ggs_file


class Text_transform:
    """QGIS Plugin Implementation."""


    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Text_transform_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GGS_text_parsing')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.FullSets=[False,False] #Всегда 2 символа

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Text_transform', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        #icon_path = ':/plugins/GGS_text_parsing/icon.png'
        #ПУТЬ до ИКОНКИ КУГИС!!!!!
        icon_path = os.path.join(os.path.dirname(__file__),'image/ggs_text_icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GGS_text_parsing'),
                action)
            self.iface.removeToolBarIcon(action)
#=======ПОЛЬЗОВАТЕЛЬСКИЕ ПРОЦЕДУРЫ/=============================
    def select_ggs_file(self):
        #
        self.FileForParce=QFileDialog.getOpenFileName(self.dlg,'Выберете файл ГГС пунктов',':','*.txt')[0]
        if self.FileForParce:
            self.dlg.ledit_ggstxt.setText(self.FileForParce)
            #print('text', self.FileForParce)
            self.change_sets(1)

    def select_out_folder(self):
        #
        self.OutPutFolder=QFileDialog.getExistingDirectory (self.dlg,'Дирректория для выходных материалов',':')
        if self.OutPutFolder:
            self.dlg.ledit_ggsoutfolder.setText(self.OutPutFolder)
            #print('text', self.OutPutFolder)
            self.change_sets(2)
    def change_sets(self,proc):
        if proc==1: self.FullSets[0]=True
        if proc==2: self.FullSets[1]=True
        #if proc==2: self.FullSets='01'
        #print(self.FullSets)

 

#=======\ПОЛЬЗОВАТЕЛЬСКИЕ ПРОЦЕДУРЫ=============================


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Text_transformDialog()
        #===================Conect/=========================
        self.dlg.pb_sel_ggstxt.clicked.connect(self.select_ggs_file)
        self.dlg.pb_sel_ggsoutfolder.clicked.connect(self.select_out_folder)
        
        #===================\Conect=========================

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result and self.FullSets[0] and self.FullSets[1]:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            print('')
            print('='*78)
            print('НАЧАЛО ОБРАБОТКИ ФАЙЛА')
            parse_ggs_file(self.FileForParce, self.OutPutFolder)

        else:
            #ToDO message box
            print('Задайте все параметры')
            self.dlg.show()
